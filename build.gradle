plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'com.jfrog.artifactory' version '4.32.0' apply false
    id "org.sonarqube" version "4.1.0.3113"
    id "gov.cms.ab2d.plugin" version "0.0.1-SNAPSHOT"
    id "maven-publish"
    id 'jacoco'
    id 'org.cyclonedx.bom' version '1.7.4' apply true
}

version = '1.0.3'
group = "gov.cms.ab2d"

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

def lombokVersion = '1.18.28'
def jacksonCore = '2.15.2'
def validationVersion = '2.0.1.Final'
def springBootVersion = '3.1.0'
def postgresVersion = '42.6.0'
def testContainerVersion = '1.18.2'
def liquibaseVersion = '4.19.0'

allprojects {
    apply plugin: 'gov.cms.ab2d.plugin'
    apply plugin: "org.cyclonedx.bom"

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
        implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCore}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCore}"
        implementation 'org.jetbrains:annotations:24.0.1'
        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        runtimeOnly "org.postgresql:postgresql:${postgresVersion}"
        implementation "org.projectlombok:lombok:${lombokVersion}"
        implementation "javax.validation:validation-api:${validationVersion}"
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testImplementation "org.testcontainers:testcontainers:${testContainerVersion}"
        testImplementation "org.testcontainers:postgresql:${testContainerVersion}"
        testImplementation "org.testcontainers:junit-jupiter:${testContainerVersion}"
        compileOnly "org.cyclonedx:cyclonedx-gradle-plugin:1.4.0"
        compileOnly "org.cyclonedx:cyclonedx-core-java:7.3.2"
    }

    cyclonedxBom {
        // includeConfigs is the list of configuration names to include when generating the BOM (leave empty to include every configuration)
        includeConfigs = ["runtimeClasspath"]
        // skipConfigs is a list of configuration names to exclude when generating the BOM
        skipConfigs = ["compileClasspath", "testCompileClasspath"]
        // Specified the type of project being built. Defaults to 'library'
        projectType = "library"
        // Specified the version of the CycloneDX specification to use. Defaults to 1.4.
        schemaVersion = "1.4"
        // Boms destination directory (defaults to build/reports)
        destination = file("build/reports")
        // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
        outputName = "bom"
        // The file format generated, can be xml, json or all for generating both
        outputFormat = "all"
        // Exclude BOM Serial Number
        includeBomSerialNumber = false
        // Override component version
        componentVersion = "2.0.0"
    }
}

sourceCompatibility = 17
targetCompatibility = 17
